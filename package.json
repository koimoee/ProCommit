{
  "name": "pro-commit",
  "displayName": "ProCommit",
  "description": "üìù A Customizable VS Code extension for AI-generated commit messages.",
  "version": "2.0.8",
  "homepage": "https://prplmoe.me",
  "bugs": "https://github.com/koiverse/ProCommit/issues",
  "repository": {
    "type": "git",
    "url": "https://github.com/koiverse/ProCommit"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.76.0"
  },
  "publisher": "Kochan",
  "categories": [
    "Other",
    "SCM Providers"
  ],
  "keywords": [
    "Commit",
    "AI",
    "ChatGPT",
    "GPT",
    "git",
    "repository"
  ],
  "icon": "assets/images/icon256.png",
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "procommit.generateAICommit",
        "title": "Generate ProCommit",
        "category": "ProCommit",
        "icon": {
          "dark": "assets/icons/commit-dark.svg",
          "light": "assets/icons/commit-light.svg"
        }
      },
      {
        "command": "procommit.setOpenAIApiKey",
        "title": "Set API key",
        "category": "ProCommit"
      },
      {
        "command": "procommit.setGenerator",
        "title": "Set Generator",
        "category": "ProCommit",
        "arguments": [
          {
            "name": "generator",
            "description": "Generator used to create commit messages",
            "type": "string",
            "enum": [
              "ChatGPT",
              "Custom"
            ]
          }
        ]
      },
      {
        "command": "procommit.setLanguage",
        "title": "Set Language",
        "category": "ProCommit",
        "arguments": [
          {
            "name": "language",
            "description": "Language used for commit messages",
            "type": "string",
            "enum": [
              "English",
              "Japanese",
              "Korean",
              "German",
              "Russian"
            ]
          }
        ]
      },
      {
        "command": "procommit.setMessageApproveMethod",
        "title": "Set Message Approve Method",
        "category": "ProCommit"
      },
      {
        "command": "procommit.setModelVersion",
        "title": "Set Model Version",
        "category": "ProCommit"
      },
      {
        "command": "procommit.setCustomEndpoint",
        "title": "Set Custom Endpoint",
        "category": "ProCommit"
      },
      {
        "command": "procommit.setTemperature",
        "title": "Set Temperature",
        "category": "ProCommit"
      },
      {
        "command": "procommit.setMaxTokens",
        "title": "Set Max Tokens",
        "category": "ProCommit"
      }
    ],
    "menus": {
      "scm/title": [
        {
          "command": "procommit.generateAICommit",
          "when": "scmProvider == git",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "ProCommit",
      "properties": {
        "procommit.general.generator": {
          "type": "string",
          "enum": [
            "ChatGPT",
            "Gemini",
            "Ollama",
            "LMStudio",
            "Smithery",
            "Custom"
          ],
          "markdownEnumDescriptions": [
            "Use ChatGPT to generate commit messages",
            "Use Gemini (Google) to generate commit messages",
            "Use Ollama (local LLM) to generate commit messages",
            "Use LMStudio (local LLM) to generate commit messages",
            "Use Smithery AI to generate commit messages",
            "Use a custom generator to create commit messages"
          ],
          "default": "ChatGPT",
          "description": "Generator used to create commit messages"
        },
        "procommit.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key for all generators (OpenAI, Gemini, Smithery, AutoCommit, etc.)"
        },
        "procommit.endpoint": {
          "type": "string",
          "default": "",
          "description": "Endpoint URL for all generators (OpenAI, Gemini, Smithery, AutoCommit, etc.). Leave blank to use the default for the selected generator."
        },
        "procommit.model": {
          "type": "string",
          "default": "",
          "description": "(Optional) Model version to use for AI generators (e.g., gpt-4o, gemini-1.5-pro, llama3, etc.). Leave blank to use the default for the selected generator."
        },
        "procommit.general.language": {
          "type": "string",
          "enum": [
            "English",
            "Japanese",
            "Korean",
            "German",
            "Russian"
          ],
          "default": "English",
          "description": "Language used for commit messages"
        },
        "procommit.general.showEmoji": {
          "type": "boolean",
          "default": false,
          "description": "Include emojis in commit messages"
        },
        "procommit.general.messageApproveMethod": {
          "type": "string",
          "enum": [
            "Quick pick",
            "Message file"
          ],
          "default": "Quick pick",
          "description": "Method used to approve generated commit messages"
        },
        "procommit.general.useMultipleResults": {
          "type": "boolean",
          "default": false,
          "description": "Allow using multiple results for commit messages"
        },
        "procommit.temperature": {
          "type": "number",
          "default": 0.2,
          "description": "Controls randomness for all generators. Lower values make output more deterministic."
        },
        "procommit.maxTokens": {
          "type": "number",
          "default": 196,
          "description": "The maximum number of tokens to generate for all generators."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build": "npm run esbuild-base -- --sourcemap",
    "watch": "npm run esbuild-base -- --sourcemap --watch",
    "lint": "eslint src --ext ts",
    "package:vsix": "vsce package",
    "package:out": "vsce package -o packages",
    "package:publish": "vsce publish"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/node": "22.x",
    "@types/vscode": "^1.76.0",
    "@typescript-eslint/eslint-plugin": "^5.56.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.3.2",
    "esbuild": "^0.24.2",
    "eslint": "^8.36.0",
    "glob": "^11.0.0",
    "typescript": "^5.7.3"
  },
  "dependencies": {
    "@google/genai": "^1.10.0",
    "execa": "^9.5.2",
    "node-fetch": "^3.3.2",
    "openai": "^3.3.0",
    "zod": "^3.24.1"
  }
}
