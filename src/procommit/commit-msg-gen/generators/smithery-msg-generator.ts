
import fetch from "node-fetch";
import { MsgGenerator } from "./msg-generator";
import { getConfiguration } from "@utils/configuration";
import {
  englishInstructions,
  russianInstructions,
  japanInstructions,
  koreanInstructions,
  germanInstructions
} from "@utils/langInstruction";

interface SmitheryConfig {
  apiKey?: string;
  endpoint?: string;
  server?: string;
  tool?: string;
}

export class SmitheryMsgGenerator implements MsgGenerator {
  apiKey: string;
  endpoint: string;
  server: string;
  tool: string;

  constructor(config: SmitheryConfig) {
    this.apiKey = config.apiKey || "";
    this.endpoint = config.endpoint || "https://smithery.ai/api/invoke";
    this.server = config.server || "@suenot/aicommit-mcp";
    this.tool = config.tool || "generateCommitMessage";
  }

  async generate(diff: string): Promise<string> {
    if (!this.apiKey) throw new Error("Smithery API key is required.");
    const url = this.endpoint;
    const config = getConfiguration();
    const language = config.general?.language || "English";
    let instruction: string;
    switch (language) {
      case "Russian":
        instruction = russianInstructions;
        break;
      case "Japanese":
        instruction = japanInstructions;
        break;
      case "Korean":
        instruction = koreanInstructions;
        break;
      case "German":
        instruction = germanInstructions;
        break;
      case "English":
      default:
        instruction = englishInstructions;
        break;
    }
    const prompt = `${instruction}\n\n${diff}`;
    const body = {
      server: this.server,
      tool: this.tool,
      input: { diff: prompt }
    };
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.apiKey}`
      },
      body: JSON.stringify(body)
    });
    if (!response.ok) throw new Error(`Smithery API error: ${response.statusText}`);
    const data: any = await response.json();
    if (!data.output) {
      throw new Error("No commit message generated by Smithery.");
    }
    return data.output.trim();
  }
}
